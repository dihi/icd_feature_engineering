ggplot(aes(x = value)) +
geom_density() +
geom_rug() +
facet_grid(variable ~ .)
?diamonds
head(diamonds)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 0.1)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 1)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 1) + geom_smooth()
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 0.5)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 10)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 30)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 10)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 5)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 1)
head(diamonds)
diamonds %>% filter(carat == 0.99 | carat == 1.00) %>% group_by(carat) $>$ mutate(total = n())
diamonds %>% filter(carat == 0.99 | carat == 1.00)
diamonds %>% filter(carat == 0.99 | carat == 1.00) %>% group_by(carat)
diamonds %>% filter(carat == 0.99 | carat == 1.00) %>% group_by(carat) $>$ mutate(total = count())
diamonds %>% group_by(carat) %>% filter(carat == 0.99 | carat == 1.00) $>$ mutate(total = n())
diamonds %>% group_by(carat) %>% filter(carat == 0.99 | carat == 1.00)
diamonds %>% filter(carat == 0.99 | carat == 1.00) %>% count(carat)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 1)
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 10) + coord_cartesian(xlim = c(0,10,000))
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 10) + coord_cartesian(xlim = c(0,10000))
ggplot(diamonds, aes(x = price)) + geom_histogram(binwidth = 10) + xlim(0, 10000)
head(flights)
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy))
flights %>%   mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
flights %>%   mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(x= sched_dep_time, y = density)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
flights %>%   mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(x= sched_dep_time, y = ..density..)) +
geom_freqpoly(mapping = aes(colour = cancelled), binwidth = 1/4)
flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot() +
geom_boxplot(mapping = aes(y = sched_dep_time, x = cancelled))
diamonds
diamonds %>% arrange(desc(price))
ggplot(diamonds, aes(x = carat, y = price)) + geom_histogram(binwidth = 30)
ggplot(diamonds, aes(x = carat, y = price)) + geom_histogram(binwidth = 30, stat = "identity")
ggplot(data = diamonds, aes(x = price, y = carat)) + geom_freqpoly(aes(color = cut), binwidth = 100)
ggplot(data = diamonds, aes(x = price, y = carat)) + geom_freqpoly(aes(color = cut), binwidth = 100, stat = "identity")
install.packages("ggstance")
library(ggstance)
?`ggstance-ggproto`
install.packages("lvplot")
library(lvplot)
ggplot(data = diamonds, aes(x = price, y = cut)) + geomlv()
ggplot(data = diamonds, aes(x = price, y = cut)) + geom_lv()
ggplot(data = diamonds, aes(x = price, y = carat)) + geom_freqpoly(aes(color = cut), binwidth = 100, stat = "identity")
ggplot(diamonds, aes(x = carat, y = price)) + geom_histogram(binwidth = 30, stat = "identity")
diamonds
install.packages("lvplot")
install.packages("lvplot")
library(lvplot)
ggplot(data = diamonds) + geom_lv(aes(x = cut, y = price))
ggplot(data = diamonds, aes(x = cut, y = price)) + geom_lv()
library("lvplot")
ggplot(diamonds, aes(x = cut, y = price)) +
geom_lv()
ggplot(diamonds, aes(x = cut, y = price)) + geom_violin()
ggplot(diamonds, aes(x = cut, y = price)) + geom_histogram()
ggplot(diamonds, aes(x = cut, y = price)) + geom_histogram(stat = "identity")
ggplot(diamonds, aes(x = cut, y = price)) + geom_freqpoly()
ggplot(diamonds, aes(x = cut, y = price)) + geom_freqpoly(stat = "identity")
ggplot(diamonds, aes(x = cut, y = ..density...)) + geom_freqpoly(aes(color = cut), binwidth = 500)
ggplot(diamonds, aes(x = price, y = ..density...)) + geom_freqpoly(aes(color = cut), binwidth = 500)
ggplot(diamonds, aes(x = price, y = ..density..)) + geom_freqpoly(aes(color = cut), binwidth = 500)
ggplot(diamonds, aes(x = cut, y = price)) + geom_violin()
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram() +
facet_wrap(~ cut, ncol = 1, scales = "free_y")
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram(binwidth = 10) +
facet_wrap(~ cut, ncol = 1, scales = "free_y")
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_histogram() +
facet_wrap(~ cut, ncol = 1, scales = "free_y")
ggplot(data = mpg) + geom_point(aes(x = class, y = hwy))
ggplot(data = mpg) + geom_point(aes(x = class, y = hwy)) + geom_jitter()
ggplot(data = mpg, aes(x = class, y = hwy)) + geom_point() + geom_jitter()
ggplot(data = mpg, aes(x = class, y = hwy)) + geom_point() + geom_jitter(width = 0.5)
ggplot(data = mpg, aes(x = class, y = hwy)) + geom_point() + geom_jitter(width = 0.1)
ggplot(data = mpg, aes(x = class, y = hwy)) + geom_point() + geom_jitter(width = 0.1, height = 0.1)
ggplot(data = mpg, aes(x = class, y = hwy)) + geom_point() + geom_jitter(width = 0.1)
ggplot(data = mpg, aes(x = class, y = hwy)) + geom_point()
c(1,2,3)
c("A","B","C")
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
diamonds %>% count(color, cut) %>% group_by(color) %>% mutate(prop = n / sum(n)) %>% ggplot(aes(x = color, y = cut)) + geom_tile(aes(fill = prop))
diamonds %>% count(color, cut) %>% group_by(color) %>% mutate(prop = n / sum(n)) %>% ggplot(aes(x = color, y = cut)) + geom_tile(aes(fill = prop)) + scale_fill_viridis(limits = c(0, 1))
diamonds %>% count(color, cut) %>% group_by(cut) %>% mutate(prop = n / sum(n)) %>% ggplot(aes(x = color, y = cut)) + geom_tile(aes(fill = prop))
diamonds %>% count(color, cut) %>% group_by(color) %>% mutate(prop = n / sum(n)) %>% ggplot(aes(x = color, y = cut)) + geom_tile(aes(fill = prop)) + scale_fill_viridis(limits = c(0, 1))
diamonds %>% count(color, cut) %>% group_by(color) %>% mutate(prop = n / sum(n)) %>% ggplot(aes(x = color, y = cut)) + geom_tile(aes(fill = prop))
diamonds %>% count(color, cut) %>% group_by(cut) %>% mutate(prop = n / sum(n)) %>% ggplot(aes(x = cut, y = color)) + geom_tile(aes(fill = prop))
flights %>% group_by(dest, month) %>% mutate(avg_delay = mean(dep_delay, na.rm = TRUE)) $%% ggplot(aes(x = destination, y = month)) + geom_tile(aes(fill = avg_delay))
flights %>% group_by(dest, month) %>% summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) $%% ggplot(aes(x = destination, y = month)) + geom_tile(aes(fill = avg_delay))
flights %>% group_by(month, dest) %>% summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) $%% ggplot(aes(x = factor(month), y = dest, fill = avg_delay)) + geom_tile()
flights %>%
group_by(month, dest) %>%
summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) +
geom_tile()
flights %>% group_by(month, dest) %>% summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) $%% ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) + geom_tile()
flights %>% group_by(month, dest) %>% summarise(dep_delay = mean(dep_delay, na.rm = TRUE)) %>% ggplot(aes(x = factor(month), y = dest, fill = dep_delay)) + geom_tile()
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
library(ggplot2)
weather
flights
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% arrange(desc(arr_delay))
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% select(year:day, arr_delay, hour, temp:visib) %>% arrange(desc(arr_delay))
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% group_by(precip) %>% summarise(delay = mean(dep_delay, na.rm=TRUE)) %>% ggplot(aes(delay, precip)) + geom_line() + geom_point()
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% group_by(precip) %>% summarise(delay = mean(dep_delay, na.rm=TRUE)) %>% ggplot(aes(precip, delay)) + geom_line() + geom_point()
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% select(year:day, arr_delay, hour, temp:visib) %>% arrange(desc(dep_delay))
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% select(year:day, dep_delay, hour, temp:visib) %>% arrange(desc(dep_delay))
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% group_by(pressure) %>% summarise(delay = mean(dep_delay, na.rm=TRUE)) %>% ggplot(aes(pressure, delay)) + geom_line() + geom_point()
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% group_by(wind_gust) %>% summarise(delay = mean(dep_delay, na.rm=TRUE)) %>% ggplot(aes(wind_gust, delay)) + geom_line() + geom_point()
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% group_by(wind_gust) %>% filter(wind_gust<250) %>% summarise(delay = mean(dep_delay, na.rm=TRUE)) %>% ggplot(aes(wind_gust, delay)) + geom_line() + geom_point()
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% group_by(wind_gust) %>% filter(wind_gust<250) %>% summarise(delay = mean(dep_delay, na.rm=TRUE)) %>% ggplot(aes(wind_gust, delay)) + geom_line() + geom_point() + geom_smooth()
flights %>% left_join(weather, c("origin" = "origin", "year" = "year", "month" = "month", "day" = "day", "hour" = "hour")) %>% group_by(wind_gust) %>% filter(wind_gust<250) %>% summarise(delay = mean(dep_delay, na.rm=TRUE)) %>% ggplot(aes(wind_gust, delay)) + geom_line() + geom_point() + geom_smooth(se = FALSE)
flights
airports
flights %>% left_join(airports, by = c("faa" = "dest"))
flights %>% left_join(airports, by = c(faa = "dest"))
flights %>% left_join(airports, c("faa" = "dest"))
flights %>% left_join(airports, by = c("dest" = "faa"))
flights %>% left_join(airports, by = c("dest" = "faa")) %>% filter(year = 2013, month = 6, day = 13)
flights %>% left_join(airports, by = c("dest" = "faa")) %>% filter(year == 2013, month == 6, day == 13)
flights %>% left_join(airports, by = c("dest" = "faa")) %>% filter(year == 2013, month == 6, day == 13) %>% group_by(lon, lat) %>% summarise(delay = mean(dep_delay))
flights %>% left_join(airports, by = c("dest" = "faa")) %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% ggplot(aes(x = dest, y = delay)) + geom_histogram(stat = "identity")
flights %>% left_join(airports, by = c("dest" = "faa")) %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE))
flights %>% left_join(airports, by = c("dest" = "faa")) %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% ggplot(aes(x = lon, y = lat, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap()
flights %>% left_join(airports, by = c("dest" = "faa")) %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap()
flights %>% left_join(airports, by = c("dest" = "faa")) %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE))
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airports, c("dest", "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap()
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% inner_join(airports, c("dest", "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap()
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% inner_join(airports, by = c("dest", "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap()
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% inner_join(airports, by = c("dest" = "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap()
library(viridisLite)
library(viridis)
install.packages("viridis")
library(viridis)
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% inner_join(airports, by = c("dest" = "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap() + scale_color_viridis()
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% left_join(airports, by = c("dest" = "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap() + scale_color_viridis()
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% inner_join(airports, by = c("dest" = "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap() + scale_color_viridis()
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% inner_join(airports, by = c("dest" = "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + geom_point() + coord_quickmap() + scale_color_viridis()
flights %>% filter(year == 2013, month == 6, day == 13) %>% group_by(dest) %>% summarise(delay = mean(arr_delay, na.rm = TRUE)) %>% inner_join(airports, by = c("dest" = "faa")) %>% ggplot(aes(y = lat, x = lon, size = delay, color = delay)) + borders("state") + geom_point() + coord_quickmap() + scale_color_viridis()
flights
unique(flight$tailnum)
unique(flights$tailnum)
flights
anti_join(flights, planes, by = "tailnum")
anti_join(flights, planes, by = "tailnum") %>% unique(origin)
flights %>% anti_join(planes, by = "tailnum") %>% unique(.$origin)
flights %>% anti_join(planes, by = "tailnum") %>% unique(origin)
flights %>% anti_join(planes, by = "tailnum") %>% table(.$origin)
flights2<-flights %>% anti_join(planes, by = "tailnum")
unique(flights2$origin)
unique(flights2$carrier)
table(flights2$carrier)
planes
flights
flights %>% group_by(tailnum) %>% count() %>% filter(n >= 100)
flights2 %>% group_by(tailnum) %>% count() %>% filter(n >= 100)
flights %>% semi_join(flights2, by = "tailnum")
planes_gt100 <-
filter(flights) %>%
group_by(tailnum) %>%
count() %>%
filter(n > 100)
filter(flights)
flights
flights2 %>% group_by(tailnum) %>% count() %>% filter(n > 100)
flights %>% group_by(tailnum) %>% count() %>% filter(n > 100)
flights2 <- flights %>% group_by(tailnum) %>% count() %>% filter(n > 100)
flights %>% semi_join(flights2, by = "tailnum")
vehicles
install.packages("fueleconomy")
library(fueleconomy)
vehicles
common
table(vehicles$model)
vehicles
common
vehicles %>% gorup
vehicles %>% group_by(make, model) %>% semi_join(common, by = c("make" = "make", "model" = "model"))
flights
flights
anti_join(flights, airports, by = c("dest" = "faa"))
anti_join
anti_join(airports, flights, by = c("faa" = "dest"))
?airports
planes
flights
flights %>% select(carrier, tailnum) %>% group_by(tailnum) %>% count(n())
flights %>% select(carrier, tailnum)
flights %>% select(carrier, tailnum) %>% group_by(tailnum) %>% count(n()) %>% filter(n > 1)
flights %>% select(carrier, tailnum) %>% group_by(tailnum) %>% count() %>% filter(n > 1)
flights %>% select(carrier, tailnum)
flights %>% select(carrier, tailnum) %>% filter(tailnum = "D942DN")
flights %>% select(carrier, tailnum) %>% filter(tailnum == "D942DN")
flights %>% select(carrier, tailnum) %>% group_by(tailnum) %>% filter(tailnum == "D942DN")
flights %>% group_by(tailnum, carrier) %>% count() %>% filter(n() > 1)
flights %>% group_by(tailnum, carrier) %>% count() %>% filter(n() > 1) %>% select(tailnum) %>% distinct()
flights %>%
group_by(tailnum, carrier) %>%
count() %>%
filter(n() > 1) %>%
select(tailnum) %>%
distinct()
flights
flights %>%
group_by(tailnum, carrier) %>%
count() %>%
filter(n() > 1) %>%
select(tailnum) %>%
distinct()
library(stringr)
library(stringr)
?paste
?paste0
?paste
paste(c("x","y","z"))
test <- c("x","y","z")
tet
test
str_c(test)
str_c("x","y")
paste("x","y")
str_c("x","y",NA)
paste("x","y", NA)
paste0("x","y")
paste0("x","y",NA)
?str_c
str_c("x","y", sep = ",")
str_c("x","y", collapse = ",")
str_c(c("x", "y", "z"), collapse = ", ")
str_c(c("x", "y", "z"), sep = ", ")
str_c(c("x", "y", "z"), collapse = ". ")
str_c("x", "y", "z", sep = ", ")
str_c("x", "y", "z", collapse = ", ")
str_c(c("x", "y", "z"), c("abc","123"), sep = ", ")
str_c(c("x", "y", "z"), c("abc","def"), sep = ", ")
x <- "apple"
str_length(x)
str_sub(x, str.length()/2, str.length()/2+1)
str_sub(x, str_length()/2, str_length()/2+1)
str_sub(x, 2, 3)
str_sub(x, str_length()/2, 4)
str_sub(x, str_length(x)/2, str_length(x)/2 + 1)
str_sub(x, str_length(x)/2, str_length(x)/2)
x <- "pie"
str_sub(x, str_length(x)/2, str_length(x)/2)
x
str_sub(x, str_length(x)/2, str_length(x))
x <- "horse"
str_sub(x, str_length(x)/2, str_length(x))
str_sub(x, str_length(x)/2, str_length(x)/2+1)
str_sub(x, str_length(x)/2, str_length(x)/2)
m <- str_length(x)/2
str_sub(x, m, m)
m <- ceiling(str_length(x)/2)
str_sub(x,m,m)
?knn
install.packages("class")
library(class)
?knn
?subset
install.packages("naivebayes")
library(naivebayes)
hflights
library(hflights)
install.packages("hflights")
library(hflights)
head(hflights)
hflights %>% filter(UniqueCarrier == "AA") %>% summarise(mean = mean(ArrDelay))
library(dplyr)
library(ggplot2)
library(tidytext)
library(stringr)
library(tm)
library(e1071)
library(quanteda)
library(caret)
library(fastAdaboost)
library(pROC)
library(glmnet)
library(naivebayes)
library(randomForest)
library(xgboost)
hflights %>% filter(UniqueCarrier == "AA") %>% summarise(mean = mean(ArrDelay))
hflights %>% filter(UniqueCarrier == "AA") %>% summarise(mean = mean(ArrDelay, na.rm = TRUE))
hflights %>% filter(UniqueCarrier == "AA")
?gsub
getwd()
install.packages("overlapping")
library(overlapping)
?overlap
dat <- droplevels(with(iris, iris[Species %in% c("versicolor", "virginica"), ]))
## make a similar graph
library(ggplot2)
ggplot(dat, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5)
ps <- lapply(split(dat, dat$Species), function(x) {
dens <- density(x$Petal.Width)
data.frame(x=dens$x, y=dens$y)
})
ps
## Some sample data from iris
dat <- droplevels(with(iris, iris[Species %in% c("versicolor", "virginica"), ]))
## make a similar graph
library(ggplot2)
ggplot(dat, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5)
?droplevels
head(iris)
?with
str(iris)
str(dat)
ggplot(dat, aes(Petal.Width, fill=Species)) +
geom_density(alpha=0.5)
ps <- lapply(split(dat, dat$Species), function(x) {
dens <- density(x$Petal.Width)
data.frame(x=dens$x, y=dens$y)
})
head(ps)
head(ps)
head(dens)
dens
lapply(split(dat, dat$Species)
lapply(split(dat, dat$Species))
?lapply
lapply(split(dat, dat$Species))
split(dat, dat$Species)
ps <- lapply(split(dat, dat$Species), function(x) {
dens <- density(x$Petal.Width)
data.frame(x=dens$x, y=dens$y)
})
ps
fs <- sapply(ps, function(x) approxfun(x$x, x$y, yleft=0, yright=0))
fs[[1]]
fs[[1]](x)
f <- function(x) fs[[1]](x) - fs[[2]](x)   # function to minimize (difference b/w curves)
f
fs
meet <- uniroot(f, interval=c(1, 2))$root  # intersection of the two curves
meet
## Find overlapping x, y values
ps1 <- is.na(cut(ps[[1]]$x, c(-Inf, meet)))
ps2 <- is.na(cut(ps[[2]]$x, c(Inf, meet)))
shared <- rbind(ps[[1]][ps1,], ps[[2]][ps2,])
## Approximate function of intersection
f <- with(shared, approxfun(x, y, yleft=0, yright=0))
## have a look
xs <- seq(0, 3, len=1000)
plot(xs, f(xs), type="l", col="blue", ylim=c(0, 2))
points(ps[[1]], col="red", type="l", lty=2, lwd=2)
points(ps[[2]], col="blue", type="l", lty=2, lwd=2)
polygon(c(xs, rev(xs)), y=c(f(xs), rep(0, length(xs))), col="orange", density=40)
integrate(f, lower=0, upper=3)$value
xs <- seq(0, 3, len=1000)
plot(xs, f(xs), type="l", col="blue", ylim=c(0, 2))
points(ps[[1]], col="red", type="l", lty=2, lwd=2)
points(ps[[2]], col="blue", type="l", lty=2, lwd=2)
plot(xs, f(xs), type="l", col="green", ylim=c(0, 2))
points(ps[[1]], col="red", type="l", lty=2, lwd=2)
points(ps[[2]], col="blue", type="l", lty=2, lwd=2)
polygon(c(xs, rev(xs)), y=c(f(xs), rep(0, length(xs))), col="orange", density=40)
meet
?approxfun
shared
install.packages("icd")
library(icd)
?icd
?merge
getwd()
new_analyte_cw <- read.csv("Downloads/new_analyte_crosswalk_final.csv")
missing_labs <- read.csv("Downloads/missing_labs_final.csv")
View(new_analyte_cw)
View(missing_labs)
View(missing_labs)
library(ggplot2)
library(dplyr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(data.table)
library(lubridate)
library(stringr)
ahrq_total_matrix <- readRDS("../Data/Processed/ahrq_total_matrix.rds")
setwd("Desktop/DIHI/Diagnosis Code/MIMIC-III/Code/")
ahrq_total_matrix <- readRDS("../Data/Processed/ahrq_total_matrix.rds")
pythia_ahrq_grouping_list <- read.csv("../Data/Final/pythia_ahrq_grouping_list.csv", header= T)
transposed <- as.data.frame(t(ahrq_total_matrix[,-1]))
transposed <- cbind(grouping = rownames(transposed), transposed)
rownames(transposed) <- NULL
transposed <- merge(pythia_ahrq_grouping_list, transposed, by = "grouping")
transposed <- as.data.table(transposed)
transposed[, freq := rowSums(transposed[, -1])]
transposed[, freq := freq/(sum(freq))]
freq_plot <- transposed %>%
ggplot(aes(x = reorder(grouping, id), y = freq)) +
geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90)) + labs(x = "Grouping", y = "Frequency (proportion)", title = table_title)
freq_plot <- transposed %>%
ggplot(aes(x = reorder(grouping, id), y = freq)) +
geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90)) + labs(x = "Grouping", y = "Frequency (proportion)", title = "Frequency table of AHRQ groupings (MIMIC)")
freq_plot
pythia_ccs_grouping_list <_ read.csv("../Data/Final/pythia_ccs_grouping_list.csv", header = T)
pythia_ccs_grouping_list <- read.csv("../Data/Final/pythia_ccs_grouping_list.csv", header = T)
View(pythia_ccs_grouping_list)
ccs_freq_plot <- create_freq_plot(ccs_total_matrix, pythia_ccs_grouping_list, "Frequency table of CCS groupigns (MIMIC)")
create_freq_plot <- function(code_matrix, grouping_list, table_title){
transposed <- as.data.frame(t(code_matrix[,-1]))
transposed <- cbind(grouping = rownames(transposed), transposed)
rownames(transposed) <- NULL
transposed <- merge(grouping_list, transposed, by = "grouping")
transposed <- as.data.table(transposed)
transposed[, freq := rowSums(transposed[, -1])]
transposed[, freq := freq/(sum(freq))]
freq_plot <- transposed %>%
ggplot(aes(x = reorder(grouping, id), y = freq)) +
geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90)) + labs(x = "Grouping", y = "Frequency (proportion)", title = table_title)
return(freq_plot)
}
ccs_freq_plot <- create_freq_plot(ccs_total_matrix, pythia_ccs_grouping_list, "Frequency table of CCS groupigns (MIMIC)")
ccs_total_matrix <- readRDS("../Data/Processed/ccs_total_matrix.rds")
pythia_ccs_grouping_list <- read.csv("../Data/Final/pythia_ccs_grouping_list.csv", header = T)
create_freq_plot <- function(code_matrix, grouping_list, table_title){
transposed <- as.data.frame(t(code_matrix[,-1]))
transposed <- cbind(grouping = rownames(transposed), transposed)
rownames(transposed) <- NULL
transposed <- merge(grouping_list, transposed, by = "grouping")
transposed <- as.data.table(transposed)
transposed[, freq := rowSums(transposed[, -1])]
transposed[, freq := freq/(sum(freq))]
freq_plot <- transposed %>%
ggplot(aes(x = reorder(grouping, id), y = freq)) +
geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90)) + labs(x = "Grouping", y = "Frequency (proportion)", title = table_title)
return(freq_plot)
}
ccs_freq_plot <- create_freq_plot(ccs_total_matrix, pythia_ccs_grouping_list, "Frequency table of CCS groupigns (MIMIC)")
ccs_freq_plot
pythia_trunc_grouping_list <- read.csv("../Data/Final/pythia_trunc_grouping_list.csv", header = T)
trunc_freq_plot <- create_freq_plot(trunc_total_matrix, pythia_trunc_grouping_list, "Frequency table of Truncated groupings (MIMIC)")
trunc_total_matrix <- readRDS("../Data/Processed/trunc_total_matrix.rds")
pythia_trunc_grouping_list <- read.csv("../Data/Final/pythia_trunc_grouping_list.csv", header = T)
create_freq_plot <- function(code_matrix, grouping_list, table_title){
transposed <- as.data.frame(t(code_matrix[,-1]))
transposed <- cbind(grouping = rownames(transposed), transposed)
rownames(transposed) <- NULL
transposed <- merge(grouping_list, transposed, by = "grouping")
transposed <- as.data.table(transposed)
transposed[, freq := rowSums(transposed[, -1])]
transposed[, freq := freq/(sum(freq))]
freq_plot <- transposed %>%
ggplot(aes(x = reorder(grouping, id), y = freq)) +
geom_bar(stat = "identity") + theme_minimal() + theme(axis.text.x = element_text(angle = 90)) + labs(x = "Grouping", y = "Frequency (proportion)", title = table_title)
return(freq_plot)
}
trunc_freq_plot <- create_freq_plot(trunc_total_matrix, pythia_trunc_grouping_list, "Frequency table of Truncated groupings (MIMIC)")
trunc_freq_plot
transposed <- as.data.frame(t(ahrq_total_matrix[,-1]))
transposed <- cbind(grouping = rownames(transposed), transposed)
rownames(transposed) <- NULL
transposed <- merge(grouping_list, transposed, by = "grouping")
pythia_ahrq_grouping_list <- read.csv("../Data/Final/pythia_ahrq_grouping_list.csv", header= T)
transposed <- cbind(pythia_ahrq_grouping_list = rownames(transposed), transposed)
rownames(transposed) <- NULL
transposed <- merge(grouping_list, transposed, by = "grouping")
transposed <- merge(pythia_ahrq_grouping_list, transposed, by = "grouping")
names(transposed)
transposed <- as.data.table(transposed)
transposed[, freq_1 := rowSums(transposed[, -1])]
transposed <- as.data.frame(t(ahrq_total_matrix[,-1]))
